AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  AppName:
    Type: String
    Default: campus-app
  Stage:
    Type: String
    Default: dev
  TableName:
    Type: String
    Default: campus-l3-dev-app-thomas-table-device-dev

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, PUT'"
        AllowHeaders: "'Accept, Content-Type, Content-Length, Authorization, X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Name:
        Fn::Sub: ${AppName}-api-${Stage}
      StageName: 
        Fn::Sub: ${Stage}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: specification/spec.yml

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-api-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: ${AppName}-api-execution-role-policy-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${GetDevices.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${AddDevice.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${UpdateDevice.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${DeleteDevice.Arn}

  DBRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-db-interactions-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:
            Fn::Sub: ${AppName}-db-interactions-role-policy-dynamo-${Stage}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  Fn::Sub: ${devicesTable.Arn}
                  
  GetDevices:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-get-devices-${Stage}
      Description: Get the list of devices
      CodeUri: ./src
      Handler: devices.get_devices
      Role:
        Fn::Sub: ${DBRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}

  AddDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-add-device-${Stage}
      Description: Add a device
      CodeUri: ./src
      Handler: devices.add_device
      Role:
        Fn::Sub: ${DBRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}

  UpdateDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-update-device-${Stage}
      Description: Update a device
      CodeUri: ./src
      Handler: devices.update_device
      Role:
        Fn::Sub: ${DBRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}

  DeleteDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-delete-device-${Stage}
      Description: Delete a device
      CodeUri: ./src
      Handler: devices.delete_device
      Role:
        Fn::Sub: ${DBRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}

  devicesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: 
        Fn::Sub: ${TableName}
      AttributeDefinitions:
      -
        AttributeName: "deviceId"
        AttributeType: "S"
      -  
        AttributeName: "deviceName"
        AttributeType: "S"
      -
        AttributeName: "deviceType"
        AttributeType: "S"

      KeySchema:
        -
          AttributeName: "deviceId"
          KeyType: "HASH"

      GlobalSecondaryIndexes:
        - IndexName: nomIndex
          KeySchema:
            - AttributeName: "deviceType"
              KeyType: "HASH"
            - AttributeName: "deviceName"
              KeyType: "RANGE"
          ProvisionedThroughput:
            ReadCapacityUnits: "200"
            WriteCapacityUnits: "200"
          Projection:
            ProjectionType: ALL
        
      ProvisionedThroughput:
        ReadCapacityUnits: "200"
        WriteCapacityUnits: "200"