AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  AppName:
    Type: String
    Default: campus-app
  Stage:
    Type: String
    Default: dev
  TableName:
    Type: String
    Default: campus-l3-dev-app-thomas-table-device-dev
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowMethods: '''POST, GET, OPTIONS, PUT'''
        AllowHeaders: '''Accept, Content-Type, Content-Length, Authorization, X-Api-Key'''
        AllowOrigin: '''*'''
        MaxAge: '''600'''
      Name:
        Fn::Sub: ${AppName}-api-${Stage}
      StageName:
        Fn::Sub: ${Stage}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../../specification/spec.yml
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: deviceId
        AttributeType: S
      - AttributeName: deviceName
        AttributeType: S
      - AttributeName: deviceType
        AttributeType: S
      KeySchema:
      - AttributeName: deviceId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '10'
        WriteCapacityUnits: '10'
      TableName:
        Fn::Sub: ${TableName}
      GlobalSecondaryIndexes:
      - IndexName: index
        KeySchema:
        - AttributeName: deviceName
          KeyType: HASH
        - AttributeName: deviceType
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '10'
          WriteCapacityUnits: '10'
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-api-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AppName}-api-execution-role-policy-${Stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: ${GetDevices.Arn}
      - PolicyName:
          Fn::Sub: ${AppName}-api-execution-role-policy-add-${Stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: ${AddDevice.Arn}
      - PolicyName:
          Fn::Sub: ${AppName}-api-execution-role-policy-update-${Stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: ${UpdateDevice.Arn}
      - PolicyName:
          Fn::Sub: ${AppName}-api-execution-role-policy-delete-${Stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: ${DeleteDevice.Arn}
  DbRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${Stage}/${AppName}/serviceRoles/
      RoleName:
        Fn::Sub: ${AppName}-function-execution-role-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AppName}-function-execution-role-policy-${Stage}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Sid: SpecificTable
            Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: '*'
  GetDevices:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-get-devices-${Stage}
      Description: Get the list of devices
      CodeUri: GetDevices
      Handler: devices.get_devices
      Role:
        Fn::Sub: ${DbRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}
  AddDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-add-device-${Stage}
      Description: add on list of devices
      CodeUri: AddDevice
      Handler: devices.add_device
      Role:
        Fn::Sub: ${DbRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}
  UpdateDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-update-device-${Stage}
      Description: update on list of devices
      CodeUri: UpdateDevice
      Handler: devices.update_device
      Role:
        Fn::Sub: ${DbRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}
  DeleteDevice:
    Type: AWS::Serverless::Function
    Properties:
      Tracing: Active
      Runtime: python3.8
      PackageType: Zip
      FunctionName:
        Fn::Sub: ${AppName}-delete-device-${Stage}
      Description: delete on list of devices
      CodeUri: DeleteDevice
      Handler: devices.delete_device
      Role:
        Fn::Sub: ${DbRole.Arn}
      Environment:
        Variables:
          DEVICES_TABLE:
            Fn::Sub: ${TableName}
